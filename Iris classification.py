# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12d7C-fDR7tyPNNG7VSQ1yiSb7LlR2LLO
"""

# === Libraries ===
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# === Load Dataset ===
data = pd.read_csv("Iris.csv")

print("First 5 rows of dataset:")
print(data.head())

# Drop 'Id' if present
if 'Id' in data.columns:
    data = data.drop(columns=['Id'])

# Split features & target
X = data.drop(columns=['Species'])
y = data['Species']

# Encode labels
encoder = LabelEncoder()
y_encoded = encoder.fit_transform(y)

# Train-Test split
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Train Random Forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# === Evaluation ===
print("\nâœ… Model Accuracy:", accuracy_score(y_test, y_pred))
print("\nðŸ“„ Classification Report:\n", classification_report(y_test, y_pred, target_names=encoder.classes_))

# Confusion Matrix Heatmap
plt.figure(figsize=(6,4))
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=encoder.classes_, yticklabels=encoder.classes_)
plt.title("Confusion Matrix Heatmap")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# === Correlation Heatmap ===
plt.figure(figsize=(6,4))
sns.heatmap(data.drop(columns=["Species"]).corr(), annot=True, cmap="coolwarm")
plt.title("Feature Correlation Heatmap")
plt.show()

# === Sepal Length by Species ===
plt.figure(figsize=(6,4))
sns.boxplot(x="Species", y="SepalLengthCm", data=data, palette="Set2")
plt.title("Sepal Length by Species")
plt.show()

# === Sepal Width by Species ===
plt.figure(figsize=(6,4))
sns.boxplot(x="Species", y="SepalWidthCm", data=data, palette="Set2")
plt.title("Sepal Width by Species")
plt.show()

# === Petal Width by Species ===
plt.figure(figsize=(6,4))
sns.boxplot(x="Species", y="PetalWidthCm", data=data, palette="Set2")
plt.title("Petal Width by Species")
plt.show()

# === Class Distribution of Species ===
plt.figure(figsize=(6,4))
sns.countplot(x="Species", data=data, palette="Set2")
plt.title("Class Distribution of Iris Species")
plt.show()

# === Petal Length vs Petal Width by Species ===
plt.figure(figsize=(6,4))
sns.scatterplot(x="PetalLengthCm", y="PetalWidthCm", hue="Species", data=data, palette="Set2")
plt.title("Petal Length vs Petal Width by Species")
plt.show()